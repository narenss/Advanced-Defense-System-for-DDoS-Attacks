from web3 import Web3
import json
import pandas as pd

# Connect to Ganache
w3 = Web3(Web3.HTTPProvider("http://127.0.0.1:8545"))
if not w3.is_connected():  # Correct method name
    raise ConnectionError("Failed to connect to the Ethereum network")

# Use the first account from Ganache
account = w3.eth.accounts[0]

# Load smart contract ABI and address
with open('/home/subramanian/network-traffic-logger/build/contracts/TrafficLogger.json') as file:
    contract_data = json.load(file)

abi = contract_data['abi']
contract_address = '0xcd2Ccf09f237C667acb25dB95f130Bd358DEfBb0'  # Your contract address

# Get the contract instance
contract = w3.eth.contract(address=contract_address, abi=abi)

# Load the dataset without predictions
df = pd.read_csv('dataset_without_predictions.csv')

# Function to check if a traffic log exists in the blockchain
def check_log_exists(src_ip, dst_ip, timestamp):
    try:
        result = contract.functions.getTrafficData(src_ip, dst_ip, int(pd.Timestamp(timestamp).timestamp())).call()
        return result
    except Exception as e:
        print(f"Error checking log: {e}")
        return None

# Process each entry and trigger actions
for _, row in df.iterrows():
    result = check_log_exists(row['src_ip'], row['dst_ip'], row['timestamp'])
    
    if result:
        print(f"Log exists on blockchain: {result}")
        # Implement logic to handle existing log
    else:
        print("Log does not exist on blockchain. Processing with ML model...")
        # Here you would call your ML model and get the prediction
        # After getting the prediction, store it in the blockchain
        # You can use the `store_logs.py` logic to store it

print("Check and trigger process completed.")

